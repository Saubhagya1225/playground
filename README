Playground - A place to play programming.

In this repository I'll save all my solutions for sites as Project Euler, URI,
SPOJ and etc. Most of these sites have problem that follows the structure of
the programming contest runned by ACM for students around the world. I used to
attend these competitions at my student age, but I still playing and having
some fun.

Most of the problem folow the sdtin/stdout programming contest standard. So you
can run it manually by running something like these commands:

    $ g++ 1003.cpp
    $ a.out < input.txt > output.txt

There is a virtual machine ready to run those problems. To lauch it run:

    $ vagrant up # to lauch the machine
    $ vagrant ssh # to ssh to the machine

The structure of the problems is:

    └─┬ PROGRAMMING CONTEST SITE
      └─┬ COMPETITION NAME (if there is the concept of competition)
        └─┬ COMPETITION ROUND (if there is the concept of competition round)
          └─┬ PROBLEM-CODE
            └── PROBLEM-CODE.{c,cpp,go,js,py}
            └── in.txt
            └── out.txt
            └── problem.txt
            └── WRONG

- PROBLEM-CODE.{c,cpp,go,js,py} - Of course, contains the source code to solve
the problem.

- problem.txt - Holds the URL to the problem and the problem text. Saving it
like this, I will be able to read the problem description offline.

- in.txt - Contains the input problem. Some problem folders don't have it
because some sites don't need input files, for example projecteuler.net.

- out.txt - Contains the output of the problem. For projecteuler problems, that
you don't submit the code, just the answer, it contains the answer.

- WRONG - It is a flag file that says the answer isn't correct yet.

In the virtual machine you have a few available commands to help yout to manage
, run, create and test problems. These are:

    new-problem - create a new problem folder
    marathon - check is the answer is correct
    cleanup - clean up temporary files
    run-all - run all problems recursively
    check-unsolved - searc for all folders with WRONG file on it recursively

This project already supports C, C++, Go, NodeJs and Python code. It also
checks lint (and fix it for Go) for all those languages.
